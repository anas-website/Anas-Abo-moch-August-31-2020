{"version":3,"sources":["components/Store.js","components/Day.js","components/Home.js","components/Favorites.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ContextStore","createContext","Store","props","useState","countryName","favorits","setfavorits","chosenCountry","setchosenCountry","Provider","value","children","Day","dateforecast","convertFToC","num","sum","Math","round","className","style","backgroundColor","textAlign","map","item","i","key","date","d2","Date","days","console","log","getDay","convertDate","Temperature","Maximum","Value","Minimum","error","returnday","isEN","validReq","Home","val","useContext","CountryName","setcountryName","flag","setflag","temperature","settemperature","setdateforecast","btnName","setbtnName","WeatherText","setWeatherText","useEffect","axios","get","then","res","data","Key","requestOne","requestTwo","all","spread","responseOne","responseTwo","Metric","DailyForecasts","catch","errors","alert","isCountryExist","name","ObjWithNameContry","find","onChange","e","test","ValidateCountry","target","type","placeholder","defaultValue","border","borderRadius","float","margin","onClick","findIndex","temp","filter","element","index","DeleteCountry","Favorites","padding","maxWidth","minWidth","marginTop","height","to","color","paddingTop","Header","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ecd0c16.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\nexport const ContextStore = createContext()\r\nexport  function Store(props) {\r\n\r\nconst [favorits, setfavorits] = useState([{countryName:'haifa'},{countryName:'Tel Aviv'}])\r\nconst [chosenCountry, setchosenCountry] = useState('Tel Aviv')\r\n\r\n    return (\r\n     <ContextStore.Provider value={{favorits:favorits,setfavorits:setfavorits,chosenCountry:chosenCountry,setchosenCountry:setchosenCountry}}>\r\n    \r\n {props.children}\r\n        \r\n     </ContextStore.Provider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Day({dateforecast}) {\r\n\r\n    const convertDate=(date)=>{\r\n        var d2 = new Date(date);\r\n        var days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\r\n        console.log(days[d2.getDay()]); \r\n        return days[d2.getDay()]\r\n        } \r\n        const convertFToC=(num)=>{\r\n            let sum= (num-32)*5/9\r\n            let result =Math.round(sum)\r\n           return result\r\n           } \r\n    const  returnday=()=>{\r\n        try {\r\n           return( dateforecast.map((item,i)=>{\r\n                  return (<td key={i} > <h5>{convertDate(item.Date)}</h5>\r\n                 <h5> { convertFToC(item.Temperature.Maximum.Value)}°C</h5> \r\n                 <p> { convertFToC(item.Temperature.Minimum.Value)}°C</p> \r\n                 </td>)\r\n                }))  \r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div>                \r\n<table className='table table-bordered'>\r\n<tbody>\r\n  <tr style={{backgroundColor:'gray',textAlign:'center'}}>\r\n  {returnday()}\r\n  </tr>\r\n\r\n</tbody>\r\n</table>\r\n                                         \r\n                 </div> \r\n    \r\n    )\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport { ContextStore } from './Store'\r\nimport Day from './Day'\r\n\r\nlet iserror=true\r\nlet isEN=false\r\nlet validReq=false\r\nexport default function Home() {\r\n  \r\n  const val = useContext(ContextStore)\r\n  \r\n  const[CountryName,setcountryName]=useState(val.chosenCountry)\r\n  const [flag, setflag] = useState(false)\r\n  const [temperature, settemperature] = useState('4')\r\n  const [dateforecast, setdateforecast] = useState('')\r\n\r\n  const [btnName, setbtnName] = useState('Delete from favorites')\r\n  const [WeatherText, setWeatherText] = useState('')\r\n \r\n  useEffect(() => {\r\n\r\n      let key; \r\n      axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=A3jUpB5lGWjGhptoO83kzg92ZiY1slgr&q=${CountryName}`)\r\n  .then((res) => {\r\n\r\n    key=res.data[0].Key\r\n    console.log(key);\r\n\r\nconst requestOne =  axios.get('http://dataservice.accuweather.com/currentconditions/v1/'+key+'?apikey=A3jUpB5lGWjGhptoO83kzg92ZiY1slgr');\r\nconst requestTwo =  axios.get('http://dataservice.accuweather.com/forecasts/v1/daily/5day/'+key+'?apikey=A3jUpB5lGWjGhptoO83kzg92ZiY1slgr');\r\n\r\n return axios.all([requestOne, requestTwo]);\r\n\r\n  })\r\n\r\n  .then(axios.spread((...res) => {\r\n    const responseOne = res[0]\r\n    const responseTwo = res[1]\r\n    validReq=true\r\n      console.log(responseOne.data);\r\n   \r\n      settemperature(responseOne.data[0].Temperature.Metric.Value)\r\n      setWeatherText(responseOne.data[0].WeatherText)\r\n      setdateforecast(responseTwo.data.DailyForecasts)\r\n         console.log(responseTwo.data.DailyForecasts[0])\r\n \r\n  })).catch(errors => {\r\n\r\n    validReq=false\r\n    alert('Request Error!.\\nThe possibility that it is due to the invalid country name!')\r\n    console.log(errors);\r\n  })\r\n     },[flag,val.favorits])\r\n\r\nconst DeleteCountry=()=>{\r\n  console.log('deleted');\r\n val.setchosenCountry('Tel Aviv')\r\n  if(!(CountryName=='Tel Aviv')){\r\n    setbtnName('Add To favorites') \r\n      let i = val.favorits.findIndex(({countryName}) =>  countryName == CountryName);\r\n\r\nlet temp=val.favorits.filter((element,index)=>(index!=i))\r\n\r\nval.setfavorits(temp)\r\n}else{\r\nalert('you can not remove default value !')}\r\n}\r\n\r\n\r\nconst isCountryExist=(name)=>{\r\n    let ObjWithNameContry= val.favorits.find( ({ countryName }) => countryName == name)\r\n         \r\n                if(ObjWithNameContry)\r\n                { setbtnName('Delete from favorites')}       \r\n                else\r\n                {setbtnName('Add To favorites')\r\n    \r\n}}\r\n\r\nconst ValidateCountry=(val)=>{\r\n isCountryExist(val)\r\n    isEN=false\r\n          let re = /^[A-Za-z ]+$/\r\n            if((re.test(val))){\r\n                isEN=true\r\n                 setcountryName(val)\r\n            }else\r\n            {isEN=false} \r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <br/>\r\n               <input onChange={(e)=>{ValidateCountry(e.target.value)}} className='form-control' type='text' name='inp' placeholder='country Name'defaultValue={val.chosenCountry} ></input>\r\n               <br/>\r\n               <div className='row' style={{border:'1px solid black',borderRadius:'3px'}}>\r\n        <div className='col-6' >\r\n              <div style={{textAlign:'center'}}>\r\n    <h3>{CountryName}</h3>\r\n              <h3>{temperature}°C</h3>\r\n              <h2>{WeatherText}</h2>\r\n              </div>\r\n        </div> \r\n        <div className='col-6' style={{}}>  \r\n               <button className='btn btn-primary'style={{float:'right',margin:'10px' }}  onClick={() => { \r\n               \r\n                 isEN ? setflag(!flag):alert('Name of country is invalid !') }}>Get Wether</button>\r\n               <button type='submit' className='btn btn-primary'style={{float:'right',margin:'10px' }}  \r\n               onClick={() => {\r\n                if(iserror&&isEN&&validReq&&btnName=='Add To favorites'){\r\n                   val.setfavorits([...val.favorits,{countryName:CountryName}])\r\n                   setbtnName('Delete from favorites')\r\n                    }\r\n                   else if(btnName=='Delete from favorites'){\r\n                    DeleteCountry()   \r\n                   }\r\n                   else{alert('Name of country is invalid !')\r\n            }}}>{btnName} </button>\r\n        </div>          \r\n        </div>\r\n        <br/><br/>\r\n      <Day dateforecast={dateforecast} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ContextStore } from './Store'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Favorites() {\r\n    const val = useContext(ContextStore)\r\n    return (\r\n        <div className='container'>\r\n               <div className='row' style={{padding:'10px',border:'1px solid black',borderRadius:'3px'}}> \r\n           {val.favorits.map((item,i)=>{\r\n                  return <Link style={{backgroundColor:'gray',border:'1px solid black',borderRadius:'3px',maxWidth:'150px',minWidth:'150px',margin:'auto',marginTop:'10px',height:'100px',textAlign:'center'}} className='col-6' key={i} to='/'onClick={()=>{{val.setchosenCountry(item.countryName)}}} ><div   >     <div  ><h4 style={{color:'black',paddingTop:'25px'}} >{item.countryName}</h4></div></div></Link>\r\n                })}\r\n</div>\r\n</div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div >\r\n <div className='' style={{backgroundColor:\"gray\",height:\"100px\"}}>\r\n        <Link to='/f' className='btn btn-primary'style={{float:'right',margin:'10px' }} onClick={() => {}}>Favorites</Link>\r\n        <Link to='/' className='btn btn-primary' style={{float:'right',margin:'10px' }} onClick={() => {}}>Home</Link>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Home from './components/Home';\nimport Favorites from './components/Favorites';\nimport Header from './components/Header';\nimport axios from 'axios'\nimport { Store } from './components/Store';\nfunction App() {\n  return (\n  <div >\n    <Store>\n    <Router>\n    <Header/>\n    <Switch>\n    <Route exact path='/' render={()=>{return <Home/>}}/>\n    <Route exact path='/f' render={()=>{return <Favorites/>}}/>\n    </Switch>\n     \n    </Router>\n      </Store>\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}